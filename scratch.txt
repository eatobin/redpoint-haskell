> lines "one, twenty two\nthree"
  ["one, twenty two","three"]
> split ", " "one, twenty two"
  ["one","twenty two"]
> map split ", " ["one, twenty two","three"]
  [["one,","two"],["three"]]
> map (map (filter (/=','))) [["one,","two"],["three"]]
  [["one","two"],["three"]]

> (map words . lines) "one, two\nthree\nfour and five, six, seven\n"
  [["one,","two"],["three"],["four","and","five,","six,","seven"]]
> map (map (filter (/=','))) $ (map words . lines) "one, two\nthree"
  [["one","two"],["three"]]
> map (map (filter (/=','))) $ (map words . lines) "one, two\nthree\nfour and five, six, seven"

-- getPlayerName ps pm =
--   let plr = getPlayer ps pm
--   in case plr of
--     Player {pName} -> pName


-- getGiftHistory :: PlrSym -> Map PlrSym Player -> GiftHist
-- getGiftHistory ps pm =
--   let player = getPlayer ps pm
--   in case player of
--     Player {giftHist} -> giftHist

gh11 = [GiftPair {giver = "GeoHarX", givee = "JohLenX"}, GiftPair {giver = "EriTob", givee = "ScoTob"}]
ds = Seq.singleton 1
gh9 = Seq.fromList gh11
gp = GiftPair {giver = "GeoHar", givee = "JohLen"}
nw = Seq.update 1 gp gh9
seq1 = Seq.fromList [GiftPair {givee = "JohLenX", giver = "GeoHarX"},GiftPair {givee = "ScoTob", giver = "EriTob"}]

l = Map.fromList [("one", (1,1)), ("two", (2,2))]

player = symb pmap
pname = player
ghist = player
gpair = ghist year
ge = gpair
gr = gpair

-- getPlayerName :: PlrSym -> Map PlrSym Player -> PName
-- getPlayerName ps pm =
--   extractPlayerName $ getPlayer ps pm

-- getGiftHistory :: PlrSym -> Map PlrSym Player -> GiftHist
-- getGiftHistory ps pm =
--   extractGiftHistory $ getPlayer ps pm

-- getGiftPair :: PlrSym -> GYear -> Map PlrSym Player -> GiftPair
-- getGiftPair ps y pm =
--   let gh = getGiftHistory ps pm
--   in Seq.index gh y

-- getGiveeCode :: PlrSym -> GYear -> Map PlrSym Player -> Givee
-- getGiveeCode ps y pm =
--   let gp = getGiftPair ps y pm
--   in case gp of
--     GiftPair {givee} -> givee

-- getGiverCode :: PlrSym -> GYear -> Map PlrSym Player -> Giver
-- getGiverCode ps y pm =
--   let gp = getGiftPair ps y pm
--   in case gp of
--     GiftPair {giver} -> giver

getRosterName :: RosterString -> RName
getRosterName rosterString =
  let rl = makeRosterList rosterString
      ri = makeRosterInfo rl
  in case ri of
    (x:_) -> x
    _     -> "None"

getRosterYear :: RosterString -> RYear
getRosterYear rosterString =
  let rl = makeRosterList rosterString
      ri = makeRosterInfo rl
  in case ri of
    (_:y:_) -> read y
    _       -> 0

setGiveeGP :: Givee -> GiftPair -> GiftPair
setGiveeGP ge gp@GiftPair {givee} = gp {givee = ge}

setGiverGP :: Giver -> GiftPair -> GiftPair
setGiverGP gr gp@GiftPair {giver} = gp {giver = gr}

-- setGivee :: PlrSym -> GYear -> Givee -> Map PlrSym Player -> Map PlrSym Player
-- setGivee ps y ge pm =
--   if checkGive ps y ge pm
--   then
--     let plr = getPlayer ps pm
--         gh = getGiftHistory plr
--         gp = giftPairGH gh y
--         ngp = setGivee ge gp
--         ngh = setGiftHistory y ngp gh
--         nplr = setPlayer ngh plr
--     in Map.insert ps nplr pm
--   else
--     pm
--
-- setGiver :: PlrSym -> GYear -> Giver -> Map PlrSym Player -> Map PlrSym Player
-- setGiver ps y gr pm =
--   if checkGive ps y gr pm
--   then
--     let plr = getPlayer ps pm
--         gh = getGiftHistory plr
--         gp = giftPairGH gh y
--         ngp = setGiver gr gp
--         ngh = setGiftHistory y ngp gh
--         nplr = setPlayer ngh plr
--     in Map.insert ps nplr pm
--   else
--     pm

--main = do
--    let m0 = Map.empty
--    let m1 = Map.insert "k1" 7 m0
--    let m  = Map.insert "k2" 13 m1
--    putStrLn $ "map: " ++ show m

--    let v1 = m ! "k1"
--    putStrLn $ "v1: " ++ show v1
--    putStrLn $ "len: " ++ show (Map.size m)

--    let m' = Map.delete "k2" m
--    putStrLn $ "map: " ++ show m'

--    let prs = Map.lookup "k2" m'
--    putStrLn $ "prs: " ++ show prs

--    let n = Map.fromList [("foo", 1), ("bar", 2)]
--    putStrLn $ "map: " ++ show n

--m9 = Map.empty
--m10 = Map.insert "k1" 77 m9
--m11 = Map.insert "k2" 133 m10

--myMap :: Ord k => [(k, a)] -> Map k a
--myMap = Map.fromList

-- getGiveeInPlayer :: GYear -> Player -> Givee
-- getGiveeInPlayer gy plr =
--   getGiveeInGiftPair gp
--     where gh = getGiftHistoryInPlayer plr
--           gp = getGiftPairInGiftHistory gh gy

-- getGiverInPlayer :: GYear -> Player -> Giver
-- getGiverInPlayer gy plr =
--   getGiverInGiftPair gp
--     where gh = getGiftHistoryInPlayer plr
--           gp = getGiftPairInGiftHistory gh gy

-- getPlayerNameInPlayer :: Player -> PName
-- getPlayerNameInPlayer Player {pName} = pName

pick :: [a] -> IO a
pick xs = randomRIO (0, length xs - 1) >>= return . (xs !!)

randomInt :: IO Int
randomInt = pick [0,1,2]

randomChar :: IO Char
randomChar = pick ['a'..'z']

-- -- gy <- readTVarIO tvGY
-- return ()
  --let gy = 0
  -- atomically $ modifyTVar tvRosterPrintString printStringRoster
  -- rosterPrintString <- readTVarIO tvRosterPrintString
  -- atomically $ writeTVar tvRosterPrintString ("\n" ++ rName ++ " - Year " ++ show rYear ++ " Gifts:\n\n")
  -- atomically $ writeTVar tvRosterPrintString (printStringRoster rName rYear 0 playersMap)
  --  atomically $ writeTVar tvRosterPrintString printStringRoster

  --atomically $ modifyTVar tvGY ((+1) tvGY)
  -- print rName
  -- roster <- readTVarIO tvPM
  -- print roster
  -- -- print rYear
  -- -- print playersMap
  -- print (getPlayerInRoster "RinSta" roster)
  -- print (getPlayerNameInRoster "RinSta" roster)
  -- print (getGiveeInRoster "PauMcc" roster gy)
  -- atomically $ modifyTVar tvPM (setGiveeInRoster "PauMcc" gy "PauMcc")
  --roster <- readTVarIO tvPM
  -- print (getGiveeInRoster "PauMcc" roster gy)
  -- print (getGiverInRoster "PauMcc" roster gy)
  -- atomically $ modifyTVar tvPM (setGiverInRoster "PauMcc" gy "PauMcc")
  -- roster <- readTVarIO tvPM
  -- print (getGiverInRoster "PauMcc" roster gy)
  -- atomically $ modifyTVar tvPM addYearInRoster
  -- roster <- readTVarIO tvPM
  -- -- noGivee <- readTVarIO tvNoGivee
  -- -- noGiver <- readTVarIO tvNoGiver
  -- -- rosterPrintString <- readTVarIO tvRosterPrintString
  --giver <- readTVarIO tvGiver
  --givee <- readTVarIO tvGivee
  --print roster
  -- giverHat <- readTVarIO tvGiverHat
  -- giveeHat <- readTVarIO tvGiveeHat
  -- giver <- readTVarIO tvGivee
  -- givee <- readTVarIO tvGiver
  -- print gy
  -- print roster
  -- print giverHat
  -- print giveeHat
  -- print giver
  -- print givee
-- startNewYear tvGY tvPM tvGiverHat tvGiveeHat tvGiver tvGivee tvDiscards
-- y <- readTVarIO tvGY
-- pm <- readTVarIO tvPM
-- -- giverHat <- readTVarIO tvGiverHat
-- -- giveeHat <- readTVarIO tvGiveeHat
-- giver <- readTVarIO tvGiver
-- givee <- readTVarIO tvGivee
-- print y
-- print pm
-- -- print giverHat
-- -- print giveeHat
-- -- print giver
-- print givee
-- atomically $ writeTVar tvGiver (Just "GeoHar")
-- atomically $ writeTVar tvGivee (Just "GeoHar")
-- giveeIsSuccess tvGiver tvGY tvGivee tvPM tvGiveeHat
-- y <- readTVarIO tvGY
-- pm <- readTVarIO tvPM
--
-- giver <- readTVarIO tvGiver
-- givee <- readTVarIO tvGivee
-- print y
-- print pm
--
-- -- print giver
-- print givee
-- -- selectNewgiver tvGiver tvGiverHat tvDiscards tvGiveeHat tvGivee
-- --   -- giverHat <- readTVarIO tvGiverHat
-- -- giveeHat <- readTVarIO tvGiveeHat
-- --   -- giver <- readTVarIO tvGiver
-- -- givee <- readTVarIO tvGivee
--   -- print giverHat
-- -- print giveeHat
-- -- print givee
--   -- gy <- readTVarIO tvGY
--   -- roster <- readTVarIO tvPM
--   -- giverHat <- readTVarIO tvGiverHat
--   -- giveeHat <- readTVarIO tvGiveeHat
--   -- giver <- readTVarIO tvGivee
--   -- givee <- readTVarIO tvGiver
--   -- discards <- readTVarIO tvDiscards
--   -- print gy
--   -- print roster
--   -- print giverHat
--   -- -- print giveeHat
--   -- print giver
--   -- print givee
--   -- print discards
--   --print giver
--   --print givee
-- v <- printAndAsk rName rYear tvGY tvPM
--   --startNewYear gy
-- -- print "Bye"
-- print v
