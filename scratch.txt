> lines "one, twenty two\nthree"
  ["one, twenty two","three"]
> split ", " "one, twenty two"
  ["one","twenty two"]
> map split ", " ["one, twenty two","three"]
  [["one,","two"],["three"]]
> map (map (filter (/=','))) [["one,","two"],["three"]]
  [["one","two"],["three"]]

> (map words . lines) "one, two\nthree\nfour and five, six, seven\n"
  [["one,","two"],["three"],["four","and","five,","six,","seven"]]
> map (map (filter (/=','))) $ (map words . lines) "one, two\nthree"
  [["one","two"],["three"]]
> map (map (filter (/=','))) $ (map words . lines) "one, two\nthree\nfour and five, six, seven"

-- getPlayerName ps pm =
--   let plr = getPlayer ps pm
--   in case plr of
--     Player {pName} -> pName


-- getGiftHistory :: PlrSym -> Map PlrSym Player -> GiftHist
-- getGiftHistory ps pm =
--   let player = getPlayer ps pm
--   in case player of
--     Player {giftHist} -> giftHist

gh11 = [GiftPair {giver = "GeoHarX", givee = "JohLenX"}, GiftPair {giver = "EriTob", givee = "ScoTob"}]
ds = Seq.singleton 1
gh9 = Seq.fromList gh11
gp = GiftPair {giver = "GeoHar", givee = "JohLen"}
nw = Seq.update 1 gp gh9
seq1 = Seq.fromList [GiftPair {givee = "JohLenX", giver = "GeoHarX"},GiftPair {givee = "ScoTob", giver = "EriTob"}]

l = Map.fromList [("one", (1,1)), ("two", (2,2))]

player = symb pmap
pname = player
ghist = player
gpair = ghist year
ge = gpair
gr = gpair

-- getPlayerName :: PlrSym -> Map PlrSym Player -> PName
-- getPlayerName ps pm =
--   extractPlayerName $ getPlayer ps pm

-- getGiftHistory :: PlrSym -> Map PlrSym Player -> GiftHist
-- getGiftHistory ps pm =
--   extractGiftHistory $ getPlayer ps pm

-- getGiftPair :: PlrSym -> GYear -> Map PlrSym Player -> GiftPair
-- getGiftPair ps y pm =
--   let gh = getGiftHistory ps pm
--   in Seq.index gh y

-- getGiveeCode :: PlrSym -> GYear -> Map PlrSym Player -> Givee
-- getGiveeCode ps y pm =
--   let gp = getGiftPair ps y pm
--   in case gp of
--     GiftPair {givee} -> givee

-- getGiverCode :: PlrSym -> GYear -> Map PlrSym Player -> Giver
-- getGiverCode ps y pm =
--   let gp = getGiftPair ps y pm
--   in case gp of
--     GiftPair {giver} -> giver

getRosterName :: RosterString -> RName
getRosterName rosterString =
  let rl = makeRosterList rosterString
      ri = makeRosterInfo rl
  in case ri of
    (x:_) -> x
    _     -> "None"

getRosterYear :: RosterString -> RYear
getRosterYear rosterString =
  let rl = makeRosterList rosterString
      ri = makeRosterInfo rl
  in case ri of
    (_:y:_) -> read y
    _       -> 0
